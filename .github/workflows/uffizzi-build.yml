name: Build PR Image
on:
    pull_request:
        types: [opened, synchronize, reopened, closed]

jobs:
    build-server:
        name: Build and push padloc server
        runs-on: ubuntu-latest
        outputs:
            servertags: ${{ steps.metaserver.outputs.tags }}
        if: ${{ github.event.action != 'closed' }}
        steps:
            - name: checkout
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Generate UUID image name for server
              id: uuidserver
              run: echo "UUID_TAG_SERVER=$(uuidgen)" >> $GITHUB_ENV

            - name: Docker metadata for server
              id: metaserver
              uses: docker/metadata-action@v4
              with:
                  images: registry.uffizzi.com/${{ env.UUID_TAG_SERVER }}
                  tags: |
                      type=raw,value=60d

            - name: Build and Push `server` Image to registry.uffizzi.com ephemeral registry
              uses: docker/build-push-action@v3
              with:
                  context: ./
                  file: ./Dockerfile-server
                  tags: ${{ steps.metaserver.outputs.tags }}
                  labels: ${{ steps.metaserver.outputs.labels }}
                  push: true
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    build-pwa:
        name: Build and push padloc pwa
        runs-on: ubuntu-latest
        outputs:
            pwatags: ${{ steps.metapwa.outputs.tags }}
        if: ${{ github.event.action != 'closed' }}
        steps:
            - name: checkout
              uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Generate UUID image name for pwa
              id: uuidpwa
              run: echo "UUID_TAG_PWA=$(uuidgen)" >> $GITHUB_ENV

            - name: Docker metadata for pwa
              id: metapwa
              uses: docker/metadata-action@v4
              with:
                  images: registry.uffizzi.com/${{ env.UUID_TAG_PWA }}
                  tags: |
                      type=raw,value=60d

            - name: Build and Push `pwa` Image to registry.uffizzi.com ephemeral registry
              uses: docker/build-push-action@v3
              with:
                  context: ./
                  file: ./Dockerfile-pwa
                  tags: ${{ steps.metapwa.outputs.tags }}
                  labels: ${{ steps.metapwa.outputs.labels }}
                  push: true
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    render-compose-file:
        name: Render Docker Compose File
        runs-on: ubuntu-latest
        needs:
            - build-pwa
            - build-server
        outputs:
            compose-file-cache-key: ${{ steps.hash.outputs.hash }}
        steps:
            - name: Checkout git repo
              uses: actions/checkout@v3
            - name: Render Compose File
              run: |
                  PADLOC_SERVER_IMAGE=${{ needs.build-server.outputs.servertags }}
                  PADLOC_PWA_IMAGE=${{ needs.build-pwa.outputs.pwatags }}
                  export PADLOC_SERVER_IMAGE
                  export PADLOC_PWA_IMAGE
                  # Render simple template from environment variables.
                  envsubst '$PADLOC_SERVER_IMAGE:$PADLOC_PWA_IMAGE' < uffizzi/docker-compose.uffizzi.yml > docker-compose.rendered.yml
                  cat docker-compose.rendered.yml
            - name: Upload Rendered Compose File as Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: preview-spec
                  path: docker-compose.rendered.yml
                  retention-days: 2
            - name: Serialize PR Event to File
              run: |
                  cat << EOF > event.json
                  ${{ toJSON(github.event) }} 

                  EOF
            - name: Upload PR Event as Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: preview-spec
                  path: event.json
                  retention-days: 2

    delete-preview:
        name: Call for Preview Deletion
        runs-on: ubuntu-latest
        if: ${{ github.event.action == 'closed' }}
        steps:
            # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
            - name: Serialize PR Event to File
              run: |
                  cat << EOF > event.json
                  ${{ toJSON(github.event) }} 

                  EOF
            - name: Upload PR Event as Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: preview-spec
                  path: event.json
                  retention-days: 2
